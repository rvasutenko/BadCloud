from aiogram.types import Message, PreCheckoutQuery, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery, \
    LabeledPrice
from aiogram.dispatcher.filters import Command, Text
from aiogram.types.message import ContentType
from aiogram.utils.callback_data import CallbackData

from src.services.sql import DataBase
from src.bot import dp, bot
from src.config import Config

cb = CallbackData('btn', 'type', 'product_id', 'category_id', 'firm_id', 'taste_id')
db = DataBase('badcloud_database.db')

async def gen_products(data, user_id):
    keyboard = InlineKeyboardMarkup()
    for i in data:
        count = await db.get_count_in_cart(user_id, i[1])
        count = 0 if not count else sum(j[0] for j in count)
        keyboard.add(InlineKeyboardButton(text=f'{i[2]}: {i[3]}p - {count}—à—Ç',
                                          callback_data=f'btn:plus:{i[1]}:-:-:{i[5]}'))
        keyboard.add(InlineKeyboardButton(text='‚¨á', callback_data=f'btn:minus:{i[1]}:-:-:{i[5]}'),
                     InlineKeyboardButton(text='‚¨Ü', callback_data=f'btn:plus:{i[1]}:-:-:{i[5]}'))
    keyboard.add(InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data=f'btn:back:-:-:-:-'))

    return keyboard

@dp.message_handler(Text('üì¶ –¢–æ–≤–∞—Ä—ã'))
@dp.message_handler(Text("–¢–æ–≤–∞—Ä—ã"))
@dp.message_handler(Text("—Ç–æ–≤–∞—Ä—ã"))
@dp.message_handler(Command('products'))
async def shop(message: Message):
    data = await db.get_categories()
    keyboard = InlineKeyboardMarkup()
    for i in data:
        keyboard.add(InlineKeyboardButton(text=f'{i[0]}', callback_data=f'btn:category:-:{i[1]}:-:-'))

    await message.answer('–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å?', reply_markup=keyboard)

@dp.callback_query_handler(cb.filter(type='category'))
async def firm(call: CallbackQuery, callback_data: dict):
    data = await db.get_firms(callback_data.get('category_id'))
    keyboard = InlineKeyboardMarkup()
    if callback_data.get('category_id') == '1':
        for i in data:
            keyboard.add(InlineKeyboardButton(text=f'{i[0]} ‚Äì {i[3]}‚ÇΩ', callback_data=f'btn:firm:-:-:{i[1]}:-'))
    else:
        for i in data:
            keyboard.add(InlineKeyboardButton(text=f'{i[0]}', callback_data=f'btn:firm:-:-:{i[1]}:-'))
    await call.message.edit_reply_markup(keyboard)
    await call.answer()

@dp.callback_query_handler(cb.filter(type='firm'))
async def taste(call: CallbackQuery, callback_data: dict):
    data = await db.get_tastes(callback_data.get('firm_id'))
    keyboard = InlineKeyboardMarkup()
    for i in data:
        keyboard.add(InlineKeyboardButton(text=f'{i[0]}', callback_data=f'btn:taste:-:-:{i[2]}:{i[1]}'))
    await call.message.edit_reply_markup(keyboard)
    await call.answer()

@dp.callback_query_handler(cb.filter(type='taste'))
async def products(call: CallbackQuery, callback_data: dict):
    data1 = await db.get_firm_name(callback_data.get('firm_id')) + await db.get_taste_name(callback_data.get('taste_id'))
    article = 'üìù <b>'
    for i in data1:
        article += f'{i[0]} '
    article = article.rstrip(article[-1])
    if callback_data.get('firm_id') in ('10', '11', '12', '13'):
        article += '</b> ‚Äì –≤–∏–¥—ã:'
    else:
        article += '</b> ‚Äì –≤–∫—É—Å—ã:'
    ans = ''
    data2 = await db.get_products(callback_data.get('taste_id'))
    for i in data2:
        ans += f'{i[1]}. {i[2]}\n'
    concl = 'üì© –û—Ç–ø—Ä–∞–≤—å—Ç–µ <b>–Ω–æ–º–µ—Ä</b> –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –≤–∫—É—Å–∞ –≤ –æ—Ç–≤–µ—Ç–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏.'
    await call.message.answer(text=article, parse_mode='HTML')
    await call.message.answer(text=ans)
    await call.message.answer(text=concl, parse_mode='HTML')
    await call.answer()


@dp.message_handler(lambda message: '1' in message.text or '2' in message.text or '3' in message.text or '4' in message.text or '5' in message.text or '6' in message.text or '7' in message.text or '8' in message.text or '9' in message.text)
async def goods(message: Message):
    ask = message.text
    user_id = message.from_user.id
    data = await db.get_user_product(int(ask))
    keyboard = await gen_products(data, user_id)
    await message.answer('üßÆ –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:', reply_markup=keyboard)

@dp.message_handler(Text('üõí –ö–æ—Ä–∑–∏–Ω–∞'))
@dp.message_handler(Text('–ö–æ—Ä–∑–∏–Ω–∞'))
@dp.message_handler(Text('–∫–æ—Ä–∑–∏–Ω–∞'))
@dp.message_handler(Command('cart'))
async def cart(message: Message):
    ans = ''
    summa = 0
    user_id = message.from_user.id
    data2 = await db.get_cart(user_id)
    if data2 == []:
        await message.answer(text='<b>–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞ : (</b>', parse_mode='HTML')
    else:
        for i in data2:
            ans += f'‚ñ∫ {i[3]} {i[4]}:\n<i>{i[5]} ‚Äì {i[7]}‚ÇΩ * {i[6]} —à—Ç</i>\n\n'
            summa += i[7] * i[6]

        keyboard = InlineKeyboardMarkup()
        keyboard.row(InlineKeyboardButton(text='–û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É', callback_data=f'btn:reset:-:-:-:-'),
                     InlineKeyboardButton(text='–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑', callback_data=f'btn:form:-:-:-:-'))

        await message.answer(text='üõí <b>–ö–æ—Ä–∑–∏–Ω–∞:</b>', parse_mode='HTML')
        await message.answer(text=ans, parse_mode='HTML')
        await message.answer(text=f'\nüßÆ <b>–ò—Ç–æ–≥: {summa}‚ÇΩ</b>', parse_mode='HTML', reply_markup=keyboard)

# @dp.callback_query_handler(cb.filter(type='form'))
# async def form(call: CallbackQuery):
#    await call.message.answer('üóÑÔ∏è –£–∫–∞–∂–∏—Ç–µ –≤ –æ—Ç–≤–µ—Ç–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ <b>—Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ</b>, –∞ –∏–º–µ–Ω–Ω–æ:\n\n1. –§–ò–û\n2. –ê–¥—Ä–µ—Å\n3. –ü–æ—á—Ç–æ–≤—ã–π –∏–Ω–¥–µ–∫—Å\n4. –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞', parse_mode='HTML')
#    await call.message.answer('–°–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –Ω–∞—á–Ω–∏—Ç–µ —Å–æ —Å–ª–æ–≤–∞ "–¥–∞–Ω–Ω—ã–µ"\n–ü–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ /confirm')

@dp.callback_query_handler(cb.filter(type='form'))
async def form(call: CallbackQuery):
    await call.message.answer('üìå –ù–∞–∂–º–∏—Ç–µ /confirm, —á—Ç–æ–±—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Å–≤–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ.')
    await call.answer()

@dp.callback_query_handler(cb.filter(type='reset'))
async def empty_cart0(call: CallbackQuery):
    await db.empty_cart(call.message.chat.id)
    await call.message.answer('–ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞!')
    await call.answer()

# dp.message_handler(lambda message: '–¥–∞–Ω–Ω—ã–µ' in message.text)
# @dp.message_handler(lambda message: '–î–∞–Ω–Ω—ã–µ' in message.text)
# async def inform(message: Message):
#     inform = message.text
#     user_id = message.from_user.id
#     await db.add_inform(user_id, inform)

@dp.message_handler(Command('confirm'))
async def send_inform(message: Message):
    roma_id = 829660042
    manager_id = 883555089

    first_name = message.from_user.first_name
    last_name = message.from_user.last_name
    nickname = message.from_user.username
    id = message.from_user.id

    ans = ''
    summa = 0
    user_id = message.from_user.id
    data2 = await db.get_cart(user_id)
    if data2 == []:
        await message.answer(text='<b>–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞ : (</b>', parse_mode='HTML')
    else:
        for i in data2:
            ans += f'‚ñ∫ {i[3]} {i[4]}:\n<i>{i[5]} ‚Äì {i[7]}‚ÇΩ * {i[6]} —à—Ç</i>\n'
            summa += i[7] * i[6]
        await bot.send_message(roma_id, f'üîî <b>–ó–ê–ö–ê–ó #</b><pre>{id}</pre>\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {first_name} {last_name}\n@{nickname}\n\n' + 'üõí <b>–¢–æ–≤–∞—Ä—ã:</b>\n' + ans + f'üßÆ <b>–ò—Ç–æ–≥: {summa}‚ÇΩ</b>\n\n', parse_mode='HTML')
        await bot.send_message(manager_id, f'üîî <b>–ó–ê–ö–ê–ó #</b><pre>{id}</pre>\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {first_name} {last_name}\n@{nickname}\n\n' + 'üõí <b>–¢–æ–≤–∞—Ä—ã:</b>\n' + ans + f'üßÆ <b>–ò—Ç–æ–≥: {summa}‚ÇΩ</b>\n\n', parse_mode='HTML')
        await message.answer('‚úÖ –í–∞—à –∑–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω.\n–û–∂–∏–¥–∞–π—Ç–µ, –≤—Å–∫–æ—Ä–µ —Å –í–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –º–µ–Ω–µ–¥–∂–µ—Ä.')

@dp.message_handler(lambda message: 'romalox' in message.text)
async def delete_from_informs(message: Message):
    if message.from_user.id == 829660042:
        user_id = (message.text.replace('romalox', '')).replace(' ', '')
        await db.empty_inform(user_id)
    else:
        await message.answer('–£ –í–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã!')

@dp.message_handler(lambda message: 'nikitalox' in message.text)
async def delete_from_cart(message: Message):
    if message.from_user.id == 829660042:
        user_id = (message.text.replace('nikitalox', '')).replace(' ', '')
        await db.empty_cart(user_id)
    else:
        await message.answer('–£ –í–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã!')
# _____________________________________________________________________________________________________________________
@dp.callback_query_handler(cb.filter(type='back'))
async def back(call: CallbackQuery):
    data = await db.get_categories()
    keyboard = InlineKeyboardMarkup()
    for i in data:
        keyboard.add(InlineKeyboardButton(text=f'{i[0]}', callback_data=f'btn:category:-:{i[1]}:-:-'))
    await call.message.edit_reply_markup(keyboard)
    await call.answer()

@dp.callback_query_handler(cb.filter(type='minus'))
async def minus(call: CallbackQuery, callback_data: dict):
    product_id = callback_data.get('product_id')
    count_in_cart = await db.get_count_in_cart(call.message.chat.id, product_id)
    if not count_in_cart or count_in_cart[0][0] == 0:
        await call.message.answer('–¢–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω–µ –æ—Ç—Å—É—Ç—Å–≤—É–µ—Ç!')
        return 0
    elif count_in_cart[0][0] == 1:
        await db.remove_one_item(product_id, call.message.chat.id)
    else:
        await db.change_count(count_in_cart[0][0] - 1, product_id, call.message.chat.id)
    data = await db.get_user_product(callback_data.get('product_id'))
    keyboard = await gen_products(data, call.message.chat.id)

    await call.message.edit_reply_markup(keyboard)
    await call.answer()

@dp.callback_query_handler(cb.filter(type='plus'))
async def plus(call: CallbackQuery, callback_data: dict):
    product_id = callback_data.get('product_id')
    firm_id = await db.get_firm_id(callback_data.get('taste_id'))
    firm_name = (await db.get_firm_name(firm_id[0][2]))[0][0]
    name = firm_id[0][0]
    product = await db.get_user_product(product_id)
    price = product[0][3]
    count_in_cart = await db.get_count_in_cart(call.message.chat.id, product_id)
    count_in_stock = await db.get_count_in_stock(product_id)
    product_name = product[0][2]
    if count_in_stock[0][0] == 0:
        await call.message.answer('–¢–æ–≤–∞—Ä–∞ –Ω–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏ :(')
        return 0
    elif not count_in_cart or count_in_cart[0][0] == 0:
        await db.add_to_cart(call.message.chat.id, product_id, firm_name, name, price, product_name)
        await call.message.answer('üõçÔ∏è –¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω. –ù–∞–∂–º–∏—Ç–µ /cart, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –∫–æ—Ä–∑–∏–Ω—É.')
    elif count_in_cart[0][0] < count_in_stock[0][0]:
        await db.change_count(count_in_cart[0][0] + 1, product_id, call.message.chat.id)
    else:
        await call.message.answer('–ë–æ–ª—å—à–µ –Ω–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏')
        return 0

    data = await db.get_user_product(callback_data.get('product_id'))
    keyboard = await gen_products(data, call.message.chat.id)

    await call.message.edit_reply_markup(keyboard)
    await call.answer()

@dp.callback_query_handler(cb.filter(type='del'))
async def delete(call: CallbackQuery, callback_data: dict):
    product_id = callback_data.get('product_id')
    count_in_cart = await db.get_count_in_cart(call.message.chat.id, product_id)
    if not count_in_cart:
        await call.message.answer('–¢–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç!')
        return 0
    else:
        await db.remove_one_item(product_id, call.message.chat.id)

    data = await db.get_user_product(callback_data.get('product_id'))
    keyboard = await gen_products(data, call.message.chat.id)

    await call.message.edit_reply_markup(keyboard)
    await call.answer()

@dp.message_handler(Command('empty'))
async def empty_cart(message: Message):
    await db.empty_cart(message.chat.id)
    await message.answer('–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞!')

# @dp.callback_query_handler(cb.filter(type='buy'))
# async def add_to_cart(call: CallbackQuery, callback_data: dict):
#     await call.answer(cache_time=30)
#
#     user_id = call.message.chat.id
#     product_id = callback_data.get('id')
#
#     await db.add_to_cart(user_id, product_id)
#     await call.message.answer('–î–æ–±–∞–≤–∏–ª!')

@dp.message_handler(Command('payyyyyy43434342'))
async def buy(message: Message):
    data = await db.get_cart(message.chat.id)
    new_data = []
    for i in range(len(data)):
        new_data.append(await db.get_user_product(data[i][2]))
    new_data = [new_data[i][0] for i in range(len(new_data))]
    prices = [LabeledPrice(label=new_data[i][2]+f' x {data[i][5]}',
                           amount=new_data[i][3]*100*data[i][5]) for i in range(len(new_data))]
    await bot.send_invoice(message.chat.id,
                           title='Cart',
                           description='Description',
                           provider_token=Config.pay_token,
                           currency='rub',
                           need_email=True,
                           prices=prices,
                           start_parameter='example',
                           payload='some_invoice')

@dp.pre_checkout_query_handler(lambda q: True)
async def checkout_process(pre_checkout_query: PreCheckoutQuery):
    await bot.answer_pre_checkout_query(pre_checkout_query.id, ok=True)

@dp.message_handler(content_types=ContentType.SUCCESSFUL_PAYMENT)
async def s_pay(message: Message):
    await db.empty_cart(message.chat.id)
    await bot.send_message(message.chat.id, '–ü–ª–∞—Ç–µ–∂ –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ!!!')
