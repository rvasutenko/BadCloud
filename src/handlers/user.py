from aiogram.types import LabeledPrice, Message, PreCheckoutQuery, ContentType, ShippingQuery, ShippingOption
from aiogram.dispatcher.filters import Command, Text

from aiogram import types
from src.bot import bot, dp
from src.config import Config

price = [LabeledPrice(label='–ù–æ—É—Ç–±—É–∫', amount=1000000)]

fast_shipping_option = ShippingOption(id='fast', title='–ë—ã—Å—Ç—Ä–∞—è').add(LabeledPrice('–ë—ã—Å—Ç—Ä–∞—è', 50000))

@dp.message_handler(Command('start'))
async def start(message: Message):
    kb = [[types.KeyboardButton(text="üì¢ –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å"),
           types.KeyboardButton(text="üì¶ –¢–æ–≤–∞—Ä—ã"),
           types.KeyboardButton(text="üõí –ö–æ—Ä–∑–∏–Ω–∞")]]
    keyboard = types.ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)
    await bot.send_message(message.chat.id,
                           "üëã–ü—Ä–∏–≤–µ—Ç!\n\n–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤—ã–±—Ä–∞–ª–∏ –Ω–∞—à –º–∞–≥–∞–∑–∏–Ω. Bad Cloud - —ç—Ç–æ –æ–≥—Ä–æ–º–Ω—ã–π –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç —Ç–æ–≤–∞—Ä–∞ –ø–æ –¥–æ—Å—Ç—É–ø–Ω—ã–º —Ü–µ–Ω–∞–º, —É–¥–æ–±–Ω–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞ –∏ –≤—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è.",
                           reply_markup=keyboard)

@dp.message_handler(Text("üì¢ –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å"))
@dp.message_handler(Text("–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å"))
@dp.message_handler(Text("–∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å"))
@dp.message_handler(Command('question'))
async def question(message: types.Message):
    await message.answer('üì¢ –ó–∞–¥–∞–π—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –≤ –æ—Ç–≤–µ—Ç–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏. –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –Ω–∞—á–Ω–∏—Ç–µ –µ–≥–æ —Å–æ —Å–ª–æ–≤–∞ "–≤–æ–ø—Ä–æ—Å".')

@dp.message_handler(lambda message: '–≤–æ–ø—Ä–æ—Å' in message.text)
@dp.message_handler(lambda message: '–í–æ–ø—Ä–æ—Å' in message.text)
async def send_question(message: Message):
    roma_id = 829660042
    manager_id = 883555089

    question = message.text

    first_name=message.from_user.first_name
    last_name=message.from_user.last_name
    nickname=message.from_user.username
    id=message.from_user.id

    await bot.send_message(roma_id, f'üì¢ <b>–í–û–ü–†–û–° #</b><pre>{id}</pre>\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {first_name} {last_name}\n@{nickname}\n\n' + question, parse_mode='HTML')
    await bot.send_message(manager_id, f'üì¢ <b>–í–û–ü–†–û–° #</b><pre>{id}</pre>\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {first_name} {last_name}\n@{nickname}\n\n' + question, parse_mode='HTML')
    await message.answer('üë®‚Äçüíª –í–∞—à –≤–æ–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. –û–∂–∏–¥–∞–π—Ç–µ, –∫–æ–≥–¥–∞ —Å –í–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –º–µ–Ω–µ–¥–∂–µ—Ä')

@dp.message_handler(Command('buydbv34b8gb48gb8we'))
async def buy_process(message: Message):
    await bot.send_invoice(message.chat.id,
                           title='Laptop',
                           description='Description',
                           provider_token=Config.pay_token,
                           currency='rub',
                           need_email=True,
                           is_flexible=True,
                           prices=price,
                           start_parameter='example',
                           payload='some_invoice')

@dp.shipping_query_handler(lambda query: True)
async def shipping_process(shipping_query: ShippingQuery):
    if shipping_query.shipping_address.country_code == 'MG':
        return await bot.answer_shipping_query(
            shipping_query.id,
            ok=False,
            error_message='–°—é–¥–∞ –Ω–µ –¥–æ—Å—Ç–∞–≤–ª—è–µ–º!'
        )
    shipping_options = [ShippingOption(id='regular',
                                       title='–û–±—ã—á–Ω–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞').add(LabeledPrice('–û–±—ã—á–Ω–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞', 10000))]

    if shipping_query.shipping_address.country_code == 'RU':
        shipping_options.append(fast_shipping_option)

    await bot.answer_shipping_query(
        shipping_query.id,
        ok=True,
        shipping_options=shipping_options
    )

@dp.pre_checkout_query_handler(lambda query: True)
async def pre_checkout_process(pre_checkout: PreCheckoutQuery):
    await bot.answer_pre_checkout_query(pre_checkout.id, ok=True)

@dp.message_handler(content_types=ContentType.SUCCESSFUL_PAYMENT)
async def successful_payment(message: Message):
    await bot.send_message(message.chat.id, '–ü–ª–∞—Ç–µ–∂ –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ!')